
<EditForm Model="@Category" OnValidSubmit="SaveAsync">
    <MudGrid>
        <MudItem xs="12" md="12">
            <MudPaper Class="pa-3 ma-1">

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Success">Добавить</MudButton>

                <MudButton Href="customers" Variant="Variant.Text">Отмена</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" md="12">
            <MudPaper Class="pa-16 ma-1">

                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField T="string" Label="Называние категории"
                                      Variant="@variant" @bind-Text="@Category.Name"
                                      For="@(() => Category.Name)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField T="string" Label="Описание"
                                      Variant="variant" @bind-Text="@Category.Description"
                                      For="@(() => Category.Description)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudFileUpload T="IBrowserFile" Context="fileInput" FilesChanged="UploadFiles">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@fileInput">
                                   Загрузить фото
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>


@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ISTUDIO.Application.Features.ModelsDTO
@using ISTUDIO.Contracts.Features.Categories;
@using ISTUDIO.Application.Features.Categories.DTOs;


@code {
    public CreateCategoriesVM Category { get; set; } = new();
    [Parameter] public EventCallback<CreateCategoriesVM> OnSave { get; set; }
    private Variant variant = Variant.Text;
    private IBrowserFile files { get; set; }
    private void UploadFiles(IBrowserFile file)
    {
        files = file;
    }
    private async Task SaveAsync()
    {
        if (files != null)
        {
            // Читаем содержимое файла и создаем экземпляр IFormFile
            using (var memoryStream = new MemoryStream())
            {
                await files.OpenReadStream().CopyToAsync(memoryStream);
                // Создаем экземпляр FormFile
                // Category.PhotoCategory = new FormFile(
                //     baseStream: memoryStream,
                //     baseStreamOffset: 0, // Начало потока
                //     length: memoryStream.Length, // Длина потока (длина файла)
                //     name: files.Name, // Имя, предоставленное BrowserFile
                //     fileName: files.Name); // Имя файла, предоставленное BrowserFile
            }
        }
        await OnSave.InvokeAsync(Category);
    }
}

<MudTable Elevation="25" ServerData="@(new Func<TableState, Task<TableData<TableModel>>>(ServerReload))"
          Loading="@_processing" Dense="true" Striped="true" Hover="true" Height="650px" HorizontalScrollbar="true" FixedHeader="true"
          @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Продукты</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Поиск" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Фото</MudTh>
        <MudTh><MudTableSortLabel SortLabel="MagazineName" T="TableModel">Магазин</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Id" T="TableModel">№</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Name" T="TableModel">Наименование</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Model" T="TableModel">Модель</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="ColorProduct" T="TableModel">Цвет продукта</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Price" T="TableModel">Цена</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="QuantityInStock" T="TableModel">Количество</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Description" T="TableModel">Описание</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Status" T="TableModel">Статус Продукта</MudTableSortLabel></MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <img src="@GetImageBase64(@context.Images.FirstOrDefault()?.Url)" alt="Product Photo" style="width: 28px; height: 28px; margin-bottom: 3px; margin-right: 5px;" />
        </MudTd>
        <MudTd DataLabel="MagazineName">@context.ProductMagazine?.MagazineName</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Model">@context.Model</MudTd>
        <MudTd DataLabel="ColorProduct">@context.Color</MudTd>
        <MudTd DataLabel="Price">
            <MudTextField T="decimal" @bind-Value="@context.Price" Immediate="true" OnBlur="@(() => UpdateProductSumm(context.Id, context.Name, context.Price))" />
        </MudTd>
        <MudTd DataLabel="QuantityInStock">
            <MudTextField T="int" @bind-Value="@context.QuantityInStock" Immediate="true" OnBlur="@(() => UpdateProductQuantity(context.Id, context.Name, context.QuantityInStock))" />
        </MudTd>
        <MudTd DataLabel="Description">
            <MudText Typo="Typo.body2" Style="@(IsExpanded.ContainsKey(context.Id) && IsExpanded[context.Id] ? null : "display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;")">
                @context.Description
            </MudText>
            @if (!IsExpanded.ContainsKey(context.Id) || !IsExpanded[context.Id])
            {
                <MudButton Variant="Variant.Text" OnClick="@(() => ToggleExpand(context.Id))">Показать больше</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Text" OnClick="@(() => ToggleExpand(context.Id))">Показать меньше</MudButton>
            }
        </MudTd>
        <MudTd DataLabel="Status">
            <MudSelect T="bool" Value="@context.IsActive" ValueChanged="@(async (newValue) => await UpdateProductStatus(context.Id, context.Name, newValue))" Immediate="true">
                <MudSelectItem T="bool" Value="true">Активировать</MudSelectItem>
                <MudSelectItem T="bool" Value="false">Деактивировать</MudSelectItem>
            </MudSelect>
        </MudTd>

        <MudTd>
            <MudIconButton Href="@($"products/edit/photos/{context.Id}")" Icon="@Icons.Material.Filled.AddAPhoto" Size="Size.Medium" Color="Color.Inherit" />
            <MudIconButton Href="@($"products/edit/{context.Id}")" Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" />
            <MudIconButton OnClick="async() => await DeleteProducts(context.Id, context.Name)" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Здесь никого нет!...</MudText>
        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="_processing" />
    </NoRecordsContent>
    <LoadingContent>
        <MudText>ищем...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 15, 25, 50, 100}" />
    </PagerContent>
</MudTable>

@using ISTUDIO.Application.Features.Products.Commands.UpdateProductQuantity
@using ISTUDIO.Application.Features.Products.Queries
@using ISTUDIO.Contracts.Features.Products
@using ISTUDIO.Web.UI.Features.Products.Commands
@using ISTUDIO.Web.UI.Features.Products.Queries
@using TableModel = ISTUDIO.Application.Features.Products.DTOs.ProductsResponseDTO;

@code {
    private IEnumerable<TableModel> pagedData;
    private MudTable<TableModel> table;
    IEnumerable<TableModel> Elements = new List<TableModel>();

    private bool _processing = false;
    private int totalItems;
    private string serachText = string.Empty;

    private Dictionary<int, bool> IsExpanded = new();

    protected override async Task OnInitializedAsync()
    {
        foreach (var product in Elements)
        {
            IsExpanded[product.Id] = false;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task<TableData<TableModel>> ServerReload(TableState state)
    {
        try
        {
            var resProducts = await _mediatr.Send(new UIGetProductsListQuery { PageNumber = state.Page, PageSize = state.PageSize });
            if (resProducts.Status)
            {
                totalItems = resProducts.Data.TotalCount;
                Elements = (IEnumerable<TableModel>)resProducts.Data.Items;
                _snackbar.Add($"Успешно!!! Количество найденных объектов: " + Elements.Count(), Severity.Success);
            }
            else
            {
                _snackbar.Add($"Инфо: Что-то пошло не так {resProducts.StatusMessage} ", Severity.Warning);
            }
            var data = Elements;
            data = await FilterTableData(data, state);
            SortTableData(ref data, state);
            return new TableData<TableModel>() { TotalItems = totalItems, Items = data };
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Ошибка: Что-то пошло не так {ex.Message} ", Severity.Error);
            return new TableData<TableModel>() { TotalItems = totalItems, Items = pagedData };
        }
    }

    public string GetImageBase64(string imageUrl)
    {
        var resHttpReq = Task.Run(async () => await _mediatr.Send(new GetFilesQuery { imageUrl = imageUrl }));
        var baseFile64 = resHttpReq.Result;
        return $"data:image/png;base64,{baseFile64.FileBase64}";
    }

    private async Task OnSearch(string text)
    {
        serachText = text;
        await table.ReloadServerData();
    }

    private void ToggleExpand(int productId)
    {
        if (!IsExpanded.ContainsKey(productId))
        {
            IsExpanded[productId] = true;
        }
        else
        {
            IsExpanded[productId] = !IsExpanded[productId];
        }
    }

    private async Task<IEnumerable<TableModel>> FilterTableData(IEnumerable<TableModel> data, TableState state)
    {
        if (string.IsNullOrWhiteSpace(serachText))
        {
            return data;
        }

        var resSearch = await _mediatr.Send(new UIGetSearchProductsQuery { PageNumber = state.Page, PageSize = state.PageSize, SearchTerm = serachText });

        if (resSearch.Status)
        {
            totalItems = resSearch.Data.PageNumber;
            Elements = (IEnumerable<TableModel>)resSearch.Data.Items;
            _snackbar.Add($"Успешно!!! Количество найденных объектов: " + Elements.Count(), Severity.Success);
        }
        else
        {
            _snackbar.Add($"Инфо: Что-то пошло не так {resSearch.StatusMessage} ", Severity.Warning);
        }

        return Elements ?? Enumerable.Empty<TableModel>();
    }

    private void SortTableData(ref IEnumerable<TableModel> data, TableState state)
    {
        switch (state.SortLabel)
        {
            case "Name":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
        }
    }

    private async Task UpdateProductQuantity(int productId, string productName, int newQuantity)
    {
        var command = new UIUpdateProductQuantityCommand
            {
                ProductQuantityUpdate = new UpdateProductQuantityVM
                {
                    ProductId = productId,
                    ProductQuantity = newQuantity
                }
            };

        var result = await _mediatr.Send(command);

        if (result.Status)
        {
            _snackbar.Add($"Количество успешно обновлено! Продукт {productName} на {newQuantity}", Severity.Success);
            await table.ReloadServerData();
        }
        else
        {
            _snackbar.Add($"Ошибка: Не удалось обновить количество Продукта {productName} {string.Join(", ", result.StatusMessage)}", Severity.Error);
        }
    }

    private async Task UpdateProductSumm(int productId, string productName, decimal newSumm)
    {
        var command = new UIUpdateProductSummaCommand
            {
                ProductSummaUpdate = new UpdateProductSummVM
                {
                    ProductId = productId,
                    ProductSumma = newSumm
                }
            };

        var result = await _mediatr.Send(command);

        if (result.Status)
        {
            _snackbar.Add($"Сумма успешно обновлено! Продукт {productName} на {newSumm}", Severity.Success);
            await table.ReloadServerData();
        }
        else
        {
            _snackbar.Add($"Ошибка: Не удалось обновить сумму Продукта {productName} {string.Join(", ", result.StatusMessage)}", Severity.Error);
        }
    }

    private async Task UpdateProductStatus(int productId, string productName, bool newStatus)
    {
        var command = new UIUpdateProductActiveCommand
            {
                ProductStatusUpdate = new UpdateProductActiveVM
                {
                    ProductId = productId,
                    ProductActive = newStatus
                }
            };

        var result = await _mediatr.Send(command);

        if (result.Status)
        {
            _snackbar.Add($"Статус успешно обновлено! Продукт {productName} на {newStatus}", Severity.Success);
            await table.ReloadServerData();
        }
        else
        {
            _snackbar.Add($"Ошибка: Не удалось обновить статус Продукта {productName} {string.Join(", ", result.StatusMessage)}", Severity.Error);
        }
    }

    private async Task DeleteProducts(int productsId, string Name)
    {
        var dialogParameters = new DialogParameters
        {
            { "ContentText", $"Вы действительно хотите удалить эти данные? Этот процесс нельзя отменить. Продукт {Name}" },
            { "ButtonText", "Удалить" },
            { "ItemName", Name },
            { "Color", Color.Error }
        };

        var dialogOptions = new DialogOptions
            {
                Position = DialogPosition.TopCenter,
                CloseButton = true,
                DisableBackdropClick = true
            };

        var dialog = _dialogService.Show<DeleteDialog>("Удалить", dialogParameters, dialogOptions);
        var resDialog = await dialog.Result;

        if (!resDialog.Canceled)
        {
            var resDelProducts = await _mediatr.Send(new UIDeleteProductsCommand { ProductId = productsId });

            if (resDelProducts.Status)
            {
                _snackbar.Add($"Успешно!!! {resDelProducts.Data.Succeeded}", Severity.Success);
                await table.ReloadServerData();
            }
            else
            {
                _snackbar.Add($"Инфо: Что-то пошло не так {resDelProducts.StatusMessage}", Severity.Warning);
            }
        }
    }
  
}
